#!/usr/bin/env python3

'''This scripts tests the various forms of the junior editor caption.'''

import argparse, configparser, datetime, os, os.path, re, subprocess, sys
import copy_cls_files, tidy_up

script = os.path.basename(__file__)
progdir = os.path.dirname(os.path.realpath(__file__))
workdir = os.path.join(progdir, '../data')
default_cfbase = 'USenglish'
default_sub = 'junioreditor'
default_template = 'junioreditor-template.tex'

def mylog(a):
  if isinstance(a, str):
    b = [a,]
  else:
    b = a
  for line in b:
    print(script + ': ' + line, flush = True)

def mylogtime(*a):
  if a:
    b = a[0]
  else:
    b = 'current'
  mylog(f'{b} time: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

def myproc(b, dry = False):
  mylog(f'executing \'{" ".join(b)}\' ...')
  if not dry:
    subprocess.Popen(b).communicate()

def do(
  workdir,
  cfbase = None,
  sections = None,
  keep = False,
  cls = False,
  chosensub = default_sub,
  template = default_template,
  dry = False
):
  mylogtime('start')

  os.chdir(workdir)
  mylog(f"descending into subdirectory '{chosensub}' ...")
  os.chdir(chosensub)
  compound = ['pdftk',]

  ## remove old temporary files and results
  tidy_up.do(
    workdir,
    [chosensub,],
    pdf = True,
    tex = True,
    res = True,
    dry = dry
  )

  ## copy cls files
  copy_cls_files.do(workdir, [chosensub,], dry = dry)

  ## determine configs to process
  if cfbase:
    chosencfbase = cfbase
  else:
    chosencfbase = [default_cfbase,]

  os.chdir(os.path.join(workdir, chosensub))
  for ini in chosencfbase:
    mylog(f'processing config file {ini}.ini')
    c = configparser.ConfigParser()
    c.read_file(open(ini + '.ini'))
    content = open(template).read()

    if sections:
      mysections = []
      for s in sections:
        if s in c.sections():
          mysections.append(s)
        else:
          mylog(f"ignoring '{s}' as it is not a section name")
      mysections = sorted(list(set(mysections)))
      if mysections:
        mylog(f'{len(mysections)} of {len(c.sections())} possible sections chosen')
      else:
        mylog(f'no sections chosen, nothing to do')
        return
    else:
      mysections = c.sections()
      mylog(f'processing all sections as no sections were chosen')

    ## generate tex and pdf files
    #
    # pdftk is not installed by default, but is freely available for Linux, macOS and Windows:
    # pdftk test-*.pdf cat output 01_result.pdf
    #
    # ghostscript most likely works on Linux and macOS:
    # gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=01_result.pdf test-*.pdf
    #
    # On macOS the following preinstalled python script should work, too:
    # "/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py" -o 01_result.pdf test-*.pdf
    #
    cmd = ['pdftk',]
    for s in mysections:
      mylog(f'processing section {s}')
      fnbase = f'autogenerated-{ini}-{s}'
      fntex = fnbase + '.tex'
      copy = content
      with open(fntex, 'w') as out:
        cs = c[s]
        for a in cs:
#          mylog(f'replacing {a.upper()} with {cs[a]}')
          copy = re.sub(a.upper(), cs[a], copy)
        mylog(f'writing output to {fntex}')
        out.write(copy)
      for cmd1 in ('pdflatex', 'bibtex', 'pdflatex', 'pdflatex'):
        myproc([cmd1 , fnbase], dry = dry)
      myproc(['pdftk' , fnbase + '.pdf', 'burst', 'output', fnbase + '_%03d.pdf'], dry = dry)
      cmd.append(fnbase + '_002.pdf')

    ## merge ini-s-pdfs into one ini-pdf
    fnresult = f'01_result_{ini}.pdf'
    mylog(f'merging relevant pages into {fnresult}')
    cmd.extend(['cat', 'output', fnresult])
    myproc(cmd, dry = dry)
    compound.append(fnresult)

  ## merge ini-pdfs into one pdf
  fncompound = '01_result.pdf'
  compound.extend(['cat', 'output', fncompound])
  mylog(f"producing overall result file '{fncompound}' ...")
  myproc(compound, dry = dry)

  ## tidy up directory
  if not keep:
    tidy_up.do(
      workdir,
      [chosensub,],
      pdf = True,
      tex = True,
      cls = cls,
      dry = dry
    )

  mylogtime('end')

if __name__ == '__main__':
  progdir = os.path.dirname(os.path.realpath(__file__))
  workdir = os.path.abspath(os.path.join(progdir, '../data'))
  allsubs = sorted(next(os.walk(workdir))[1])
  jesubs = [s for s in allsubs if re.match('junioreditor', s)]

  ## parse command line
  parser = argparse.ArgumentParser(description = 'generate tex and pdf files from a latex template and an ini file')
  parser.add_argument(
    'sections',
    nargs = '*',
    help = 'Sections of configuration file to process. Without arguments, all sections are processed.'
  )
  parser.add_argument(
    '-c',
    '--config',
    action = 'append',
    default = [default_cfbase,],
    help = f"Configuration file basename. The default is '{default_cfbase}'."
  )
  parser.add_argument(
    '-k',
    '--keep',
    action = 'store_true',
    help = 'preserve temporary files'
  )
  parser.add_argument(
    '--cls',
    action = 'store_true',
    help = 'delete the class file and others'
  )
  parser.add_argument(
    '-s',
    '--sub',
    choices = jesubs,
    default = default_sub,
    help = f"Subdirectory of the data directory. The default is '{default_sub}'."
  )
  parser.add_argument(
    '-t',
    '--template',
    default = default_template,
    help = f"Template file. The default is '{default_template}'."
  )
  parser.add_argument(
    '-n',
    '--dry',
    action = 'store_true',
    help = 'pretend only to execute the tasks'
  )
  args = parser.parse_args()
  mylog(f'args are {args}')
  do(
    workdir,
    sections = args.sections,
    cfbase = args.config,
    keep = args.keep,
    cls = args.cls,
    chosensub = args.sub,
    template = args.template,
    dry = args.dry
  )

  #input('Press RETURN to proceed!')
